{ showLogin ? <LoginForm /> : <RegisterForm />}

setShowLogin={setShowLogin}

const [showLogin, setShowLogin] = useState(false)

const handleLoginClick = (e)=>{
    e.preventDefault()
    setShowLogin(true)
}
const handleSignupClick = (e)=>{
    e.preventDefault()
    setShowLogin(false)
}



LOGOUT FUNCTION 


// HomeNavbar.js
import React from "react";
import { Link } from "react-router-dom";

function HomeNavbar() {
  const handleLogout = () => {
    localStorage.removeItem('token');
    window.location.href = "/login"; // Redirect to login after logout
  };

  return (
    <nav>
      <ul>
        <li><Link to="/home">Home</Link></li>
        <li><Link to="/profile">Profile</Link></li>
        <li><button onClick={handleLogout}>Logout</button></li>
      </ul>
    </nav>
  );
}

export default HomeNavbar;




const productContainer = document.querySelector('.products-container');
const cartCountElement = document.querySelector('.cart-count'); // Assuming you have an element for cart count.

async function getProducts() {
    try {
        const response = await fetch('http://localhost:3000/getproducts');
        const data = await response.json();
        let products = data.products;

        products.forEach(product => {
            let imgurl = product.image;
            let productname = product.name;
            let price = product.price;

            const productBox = document.createElement('div');
            productBox.classList.add('product-box');
            productBox.innerHTML = `
                <div class="product-img">
                    <img src="${imgurl}" alt="${productname}">
                </div>
                <div class="product-info">
                    <div class="price">
                        <h2>$${price}/-</h2>
                    </div>
                    <div class="product-title">
                        <h3>${productname}</h3>
                    </div>
                </div>
            `;

            // Attach click event to send product to cart
            productBox.addEventListener('click', () => addToCart(productname));

            productContainer.appendChild(productBox);
        });
    } catch (e) {
        console.error('Error fetching products:', e);
    }
}

async function addToCart(productName) {
    try {
        const response = await fetch('http://localhost:3000/createcartproducts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: productName,
                username: 'zain1008', // Replace with localStorage later
            }),
        });

        const data = await response.json();
        if (response.ok) {
            console.log('Product added to cart:', data.message);
            getUserCart(); // Update cart count after adding
        } else {
            console.error('Error adding to cart:', data.message);
        }
    } catch (error) {
        console.error('Error in addToCart:', error);
    }
}

async function getUserCart() {
    try {
        const response = await fetch('http://localhost:3000/getusercart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: 'zain1008', // Replace with localStorage later
            }),
        });

        const data = await response.json();
        if (response.ok) {
            const totalQty = data.products.reduce((total, product) => total + product.qty, 0);
            cartCountElement.textContent = totalQty; // Display the total quantity
        } else {
            console.error('Error fetching user cart:', data.message);
        }
    } catch (error) {
        console.error('Error in getUserCart:', error);
    }
}

// Fetch products on page load
getProducts();
getUserCart();



import React from 'react';
import './category.css';

function Category() {
    return (
        <div className="cat-parent">
            <h1>CATEGORIES</h1>
            <div className="cat-boxes">
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-1.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>EXECUTIVE SERIES</h2>
                    </div>
                </div>
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-2.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>CEO COLLECTION</h2>
                    </div>
                </div>
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-3.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>ELITE EXCLUSIVE</h2>
                    </div>
                </div>
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-4.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>TAILORED PRESTIGED</h2>
                    </div>
                </div>
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-5.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>TIMELESS CLASSICS</h2>
                    </div>
                </div>
                <div className="cat-box">
                    <div className="img">
                        <img src="/src/assets/cat-6.png" alt="Category Picture" />
                    </div>
                    <div className="txt">
                        <h2>ROYAL HERITAGE</h2>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Category;




import React, { useEffect, useState } from "react";
import './checkoutpage.css';
import { set } from "mongoose";

function CheckoutBox() {
    const [total, setTotal] = useState(0);
    const [shipmentCharge, setShipmentCharge] = useState(0);
    const [gst, setGst] = useState(0);
    const [netTotal, setNetTotal] = useState(0);

    // Shipping INfo 
    const [country, setCountry] = useState('');
    const [city, setCity] = useState('');
    const [address, setAddress] = useState('');
    const [landmark, setLandmark] = useState('');
    const [postalCode, setPostalCode] = useState('');

    // Notification 
    const [notification, setNotification] = useState('');

    // Sending Shipping Data 
    const sendShippingData = async (e) => {
        e.preventDefault();
        const shippingData = { country, city, address, landmark, postalCode };
        try {
            const username = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/placeorder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, shippingData }),
            });
            const data = await response.json();
            if (response.ok) {
                setNotification("ORDER COMPLETED SUCCESSFULLY  YOU CAN TRACK IT ON HOME PAGE BY CLICKING ON LOGO");

                // Hide notification after 3 seconds
                setTimeout(() => {
                    setNotification(''); 
                }, 8000);
            }

        }
        catch (err) {
            console.error("Error:", err);
        }
    };

    // Net Total Function 
    async function getNetTotal() {
        try {
            const username = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/placeorder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            });

            const data = await response.json();
            console.log(data)
            if (response.ok) {

                // Default Notification 
                setNotification('PLEASE PROCEED WITH YOUR ORDER IN 30 MINS ELSE IT WILL BE CANCELLED AUTOMATICALLY');

                setTimeout(() => {
                    setNotification('');
                }, 8000);
                setTotal(data.total || 0);
                setShipmentCharge(data.shipmentCharge || 0);
                setGst(data.gst || 0);
                setNetTotal(data.netTotal || 0);

                setCountry(data.shippingAddress.country || '');
                setCity(data.shippingAddress.city || '');
                setAddress(data.shippingAddress.address || '');
                setLandmark(data.shippingAddress.landmark || '');
                setPostalCode(data.shippingAddress.postalCode || '');
            } else {
                console.error("Error:", data.message);
            }
        }
        catch (err) {
            console.error("Error fetching cart:", err);
        }
    }

    useEffect(() => {
        getNetTotal();
    }, []);

    return (
        <>
            <div className="checkout-header">
                <h1>CHECKOUT</h1>
            </div>
            <div className="checkout-container">
                <div className="address-container">
                    <h3>SHIPPING ADDRESS</h3>
                    <form className="shipping-details-form">
                        <input type="text" placeholder="COUNTRY" value={country} onChange={(e) => setCountry(e.target.value)} />
                        <input type="text" placeholder="CITY" value={city} onChange={(e) => setCity(e.target.value)} />
                        <textarea placeholder="ADDRESS" value={address} onChange={(e) => setAddress(e.target.value)}></textarea>
                        <input type="text" placeholder="LANDMARK" value={landmark} onChange={(e) => setLandmark(e.target.value)} /><br />
                        <input type="text" placeholder="POSTAL CODE" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} />
                    </form>
                </div>
                <div className="total-container">
                    <div className="charges">
                        <h5>BILL: ${total}/-</h5>
                    </div>
                    <div className="charges">
                        <h5>SHIPPING: ${shipmentCharge}/-</h5>
                    </div>
                    <div className="charges">
                        <h5>GST%: ${gst}/-</h5>
                    </div>
                    <div className="net-total">
                        <h3>NET TOTAL: ${netTotal}/-</h3>
                    </div>
                </div>
                <div className="place-order-btn">
                    <button onClick={sendShippingData}>PLACE ORDER</button>
                </div>
            </div>
            {notification && (
                <div className="notification-div">
                    <h3>{notification}</h3>
                </div>
            )}
        </>
    );
}

export default CheckoutBox;


import React, { useState } from "react";
import { useEffect } from "react";
import "./OrdersPanel.css";

function AdminTrackingPanel() {
    const [orders, setOrders] = useState([]);

    const fetchOrders = async () => {
                try {
                    const response = await fetch("http://localhost:3000/getuserorders");
                    if (!response.ok) {
                        throw new Error("Failed to fetch orders");
                    }
                    const data = await response.json();
                    console.log(data)
                    setOrders(data.orders);
                } catch (err) {
                    console.log(err);
                }
            };
    useEffect(() => {
        fetchOrders();
    }, []);


    return (
        <>
            <table>
                <thead>
                    <th>ORDER ID</th>
                    <th>USERNAME</th>
                    <th>EMAIL</th>
                    <th>ACTION</th>
                </thead>
                <tbody>
                    <tr>
                        <td>#001</td>
                        <td>Muhammad Zain Ali</td>
                        <td>zain@gmail.com</td>
                        <td>
                            <button>
                                VIEW
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <table>
                                <thead>
                                    <th>PRODUCT ID</th>
                                    <th>PRODUCT NAME</th>
                                    <th>QTY</th>
                                    <th>NET TOTAL</th>
                                    <th>STATUS</th>
                                </thead>
                                <tbody>
                                    <td>#001</td>
                                    <td>4P SUIT</td>
                                    <td>4</td>
                                    <td>$500/-</td>
                                    <td>
                                        <select name="Status"  className="status">
                                            <option value="Pending">Pending</option>
                                            <option value="Pending">Pending</option>
                                            <option value="Pending">Pending</option>
                                        </select>
                                    </td>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                </tbody>
            </table>
        </>
    );
}

export default AdminTrackingPanel;


<div className="tracking-header">
                <img src="../src/assets/logo.png" alt="" />
                <div className="net-total-container">
                    <h2>NET TOTAL<sub>(Incl Tax)</sub> : $500/-</h2>
                </div>
            </div>

            <div className="user-orders">
                <h1>Orders</h1>
                <div className="orders-container">
                    <div className="p-img">
                        <img src="../src/assets/cat-1.png" alt="" />
                    </div>
                    <div className="p-details">
                        <span>QTY: 5</span>
                        <span>TOTAL: $600/-</span>
                    </div>
                    <div className="status-container">
                    <h2>Stauts: <strong>Out For Delivery</strong></h2>
                </div>
                </div>
                
            </div>


import React, { useState } from "react";
import { useEffect } from "react";
import "./OrdersPanel.css";

function AdminTrackingPanel() {
    const [orders, setOrders] = useState([]);

    const fetchOrders = async () => {
        try {
            const response = await fetch("http://localhost:3000/getuserorders");
            if (!response.ok) {
                throw new Error("Failed to fetch orders");
            }
            const data = await response.json();
            console.log(data)
            setOrders(data.orders);
        } catch (err) {
            console.log(err);
        }
    };

    const HandleStatusChange = async ()=>{
        
    }
    useEffect(() => {
        fetchOrders();
    }, []);




    return (
        <>
            <div id="orders-page">
                <table>
                    <thead>
                        <th>ORDER ID</th>
                        <th>USERNAME</th>
                        <th>EMAIL</th>
                        <th>ACTION</th>
                    </thead>
                    <tbody>
                        {orders.map((order, index) => (
                            <React.Fragment key={index}>
                                <tr key={index}>
                                    <td>{index + 1}</td>
                                    <td>{order.username}</td>
                                    <td>{order.email}</td>
                                    <td>
                                        <button>
                                            VIEW
                                        </button>
                                    </td>
                                </tr>
                                <tr colSpan="4">
                                    <td>
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>PRODUCT ID</th>
                                                    <th>PRODUCT NAME</th>
                                                    <th>QTY</th>
                                                    <th>NET TOTAL</th>
                                                    <th>STATUS</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {order.orders.products.map((product, pIndex) => (
                                                    <tr>
                                                        <td>{product.product_id}</td>
                                                        <td>{product.name}</td>
                                                        <td>{product.qty}</td>
                                                        <td>{product.total}</td>
                                                        <td>
                                                            <select name="Status" className="status">
                                                                <option value="Pending">Pending</option>
                                                                <option value="Shipped">Shipped</option>
                                                                <option value="Delivered">Delivered</option>
                                                            </select>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            </React.Fragment>
                        ))}
                    </tbody>
                </table>
            </div>
        </>
    );
}

export default AdminTrackingPanel;

import React, { useEffect, useState } from 'react';
import './user-products.css';
import ProductNav from './ProductNav';
import { useParams } from 'react-router-dom';

const Products = () => {
    const [products, setProducts] = useState([]);
    const {categoryName} = useParams();

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const response = await fetch(`http://localhost:3000/getproducts/${categoryName}`);
                const data = await response.json();
                setProducts(data.products);
            } catch (err) {
                console.error('Error fetching products:', err);
            }
        };

        fetchProducts();
    }, []);

    const handleAddToCart = async (productName) => {
        const username = localStorage.getItem('username');
        try {
            const response = await fetch('http://localhost:3000/createcartproducts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: productName,
                    username: username,
                }),
            });
            const data = await response.json();
            if (response.ok) {
                console.log(data.message);
                console.log(data.cart);
            }
        } catch (err) {
            console.error('Error adding product to cart:', err);
        }
    };

    return (
        <>
            <ProductNav />
            <div className="products-container-user">
                {products.map((product, index) => (
                    <div className="product-box" key={index}>
                        <div className="product-img">
                            <img src={product.image} alt={product.name} />
                        </div>
                        <div className="product-info">
                            <div className="price">
                                <h2>${product.price}/-</h2>
                                <img
                                    className="cart-logo"
                                    src="../src/assets/cart-logo.png"
                                    alt="Add to cart"
                                    onClick={() => handleAddToCart(product.name)}
                                />
                            </div>
                            <div className="product-title">
                                <h3>{product.name}</h3>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </>
    );
};

export default Products;


import React, { useEffect, useState } from "react";
import './usercart.css'
import { useNavigate } from "react-router-dom";
import { set } from "mongoose";
// import '@fortawesome/fontawesome-free/css/all.min.css';

const UserCart = () => {
    const [cartProducts, setCartProducts] = useState([]);
    const [subtotal, setSubtotal] = useState(0);
    const [checkedProducts, setCheckedProducts] = useState({});
    const [selectedProducts, setSelectedProducts] = useState([]);
    const navigate = useNavigate();

    const fetchCart = async () => {
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/getusercart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName }),
            });

            const data = await response.json();
            setCartProducts(data.products || []);
        } catch (err) {
            console.error("Error fetching cart:", err);
        }
    };
    useEffect(() => {
        fetchCart();
    }, []);

    const deleteProduct = async (productName, price) => {
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/deletecartproduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, productName: productName }),
            });

            const data = await response.json();
            if (response.ok) {
                console.log(data.message);
                setCartProducts((prevProducts) => {
                    const updatedProducts = prevProducts.filter((product) => product.name !== productName);
                    return updatedProducts;
                });
                setSubtotal((prevSubtotal) => prevSubtotal - price);
            } else {
                console.error(`Error: ${data.message}`);
            }
        } catch (err) {
            console.error("Error deleting product:", err);
        }
    };
    // DIVIDING FUNCTIONS SEPERATELY SO THAT FRONTEND AND BACKEND CAN WORK SEPERATE AVOIDING UI BUGS
    const CartProductQuantity = async (productName, action) => {


        try {
            const userName = localStorage.getItem('username');
            const response = await fetch(`http://localhost:3000/${action}qty`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, productName: productName }),
            });
            if (response.ok) {
                const data = await response.json();
                console.log(data.message);
                //  fetchCart();
            }

        }
        catch (err) {
            console.error("Error incrementing quantity:", err);
        }
    };
    // SEPERATE UI FUNCTIONS 
    const updateSubtotal = () => {
        let newSubtotal = 0;
        cartProducts.forEach(product => {
            if (checkedProducts[product.name]) {
                newSubtotal += product.price * product.qty;
            }
        });
        setSubtotal(newSubtotal);
    };
    // SUBTOTAL LIVE CALL 
    useEffect(() => {
        updateSubtotal();
    }, [cartProducts, checkedProducts]);

    // SEMICOLONS AND FUNCTION BRACKETS IN MAP THING END RE CHECK PERMISSIONS 
    const incrementQuantity = (productName) => {
        setCartProducts((prevProducts) =>
            prevProducts.map((product) =>
                product.name === productName ? { ...product, qty: product.qty + 1 } : product

            )
        );
        CartProductQuantity(productName, 'increase');
    };
    const decreamentQuantity = (productName) => {
        setCartProducts((prevProducts) =>
            prevProducts.map((product) =>
                product.name === productName && product.qty > 1 ? { ...product, qty: product.qty - 1 } : product
            )
        );
        CartProductQuantity(productName, 'decrease');
    };
    const handleCheckboxChange = (e, productName) => {
        const isChecked = e.target.checked;
        setCheckedProducts((prevProducts) => ({ ...prevProducts, [productName]: isChecked }));
    }
    // Checkout Page Handling 
    const SendCheckedOutProducts = async (selectedProducts) => {  
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, products: selectedProducts }),
            });
            if (response.ok) {
                const data = await response.json();
                console.log(data.message);
            }
        }
        catch (err) {
            console.error("Error checking out:", err);
        }
    };
    const handleCheckout = () => {
        const selectedProducts = [];
        cartProducts.forEach(product => {
            if (checkedProducts[product.name]) {
                selectedProducts.push({
                    name: product.name,
                    price: product.price,
                    qty: product.qty,
                    total: product.price * product.qty, //PASSING IT FOR TOTAL ON CHECKOUT PAGE YEAAAAHHHH GOOOD MIIINNNNDDDD
                    product_id: product.product_id,
                    image: product.image,
                    status: product.status
                });
            }
        });
        if (selectedProducts.length === 0) {
            alert('SELECT ATLEAST  ONE PRODUCT TO CHECKOUT');
            return;
        }
        setSelectedProducts(selectedProducts);
        SendCheckedOutProducts(selectedProducts);
        navigate('/checkout');
    };
    // console.log(cartProducts);  //REMOVE LATER  ---------------
    // console.log(checkedProducts); //REMOVE LATER---------------
    // console.log(selectedProducts); //REMOVE LATER---------------
    return (
        <div className="user-cart">
            <div className="header">
                <h1>MY CART</h1>
            </div>
            <div className="cart-container">
                {cartProducts.length != 0 ? (
                    cartProducts.map((product, index) => (
                        <div key={index} className="cart-product">
                            <div className="cart-product-img">
                                <img src={product.image} alt={product.name} />
                            </div>
                            <div className="product-details">
                                <h2>${product.price}/-</h2>
                                <h2>{product.name}</h2>
                                <span id="qty">
                                    QTY:
                                    <i className="fa-solid fa-plus" id="increment" onClick={() => incrementQuantity(product.name, product.qty)}></i>
                                    {product.qty}
                                    <i className="fa-solid fa-minus" id="decrement" onClick={() => decreamentQuantity(product.name)}></i>
                                </span>
                            </div>
                            <div className="select-delete-container">
                                <img src="../src/assets/delete-logo.svg" alt="bin" onClick={() => deleteProduct(product.name, product.price)} />
                                <input
                                    type="checkbox"
                                    id="product-check"
                                    onChange={(e) => handleCheckboxChange(e, product.name, product.price, product.qty)}
                                    checked={checkedProducts[product.name] || false}
                                />
                            </div>
                        </div>
                    ))
                ) : <h1 className="default-cart-message">No Products In Cart</h1>
                }

            </div>

            <div className="checkout-box">
                <div className="subtotal-price">
                    <span id="subtotal">SUBTOTAL: ${subtotal.toFixed(2)}/-</span>
                </div>
                <div className="checkout-btn-container">
                    <button type="button" className="checkout-btn" onClick={handleCheckout}>
                        CHECKOUT
                    </button>
                </div>
            </div>
        </div>
    );
};

export default UserCart;
import React, { useEffect, useState } from 'react';
import './admininfo.css';
import './admin.css';

function AdminInfo() {
    const [adminInfo, setAdminInfo] = useState(null);

    useEffect(() => {
        // Retrieve admin info from localStorage
        const storedAdminInfo = localStorage.getItem('adminInfo');
        if (storedAdminInfo) {
            setAdminInfo(JSON.parse(storedAdminInfo));
        }
    }, []);

    if (!adminInfo) {
        return <p>Loading admin information...</p>;
    }

    return (
        <div className="admininfo">
            <h1>ADMIN'S PROFILE</h1>
            <div className="info-container">
                <div className="userlogo">
                    <img src="../src/assets/userlogo.png" alt="User Logo" />
                </div>
                <div className="infoboxes">
                    <div className="infobox">
                        <h2>ID: {adminInfo.admin_id}</h2>
                        
                    </div>
                    <div className="infobox">
                        <h2>USERNAME: {adminInfo.username}</h2>
                        
                    </div>
                    <div className="infobox">
                        <h2>EMAIL: {adminInfo.email}</h2>
                        
                    </div>
                    <div className="infobox">
                        <h2>PASSWORD: {adminInfo.password}</h2>
                        
                    </div>
                </div>
            </div>
        </div>
    );
}

export default AdminInfo;

import React from "react";
import './admin.css'


function AdminNav() {
    return (
        <>
            <nav id="panelnav">
                <div class="panellogo">
                    <img src="../src/assets/Logo.png" alt="Logo"/>
                </div>
                <div class="paneltext">
                    <h1>BE BOLD BE TIMELESS</h1>
                </div>
            </nav>
        </>
    )
}
export default AdminNav;
import { React, useEffect } from 'react';
import { Routes, Route } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import Sidemenu from './Sidemenu';
import ProductForm from './ProductForm';
import AdminNav from './AdminNav.jsx';
import AdminInfo from './AdminInfo.jsx';
import AdminProducts from './Adminproducts.jsx';

function AdminPanel() {
  const navigate = useNavigate();
  const checkAuthorization = async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      alert('Unauthorized. Redirecting to login.');
      navigate('/adminlogin');
      return;
    }

    try {
      // Validate token with the backend
      const response = await fetch('http://localhost:3000/adminpanel', {
        headers: {
          method: 'GET',
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        alert('Invalid or expired token');
      }

      const data = await response.json();
      console.log(data.message); // Welcome message from the backend

    } catch (err) {
      console.error(err);
      alert('Session expired. Please login again.');
      navigate('/adminlogin');
    }
  }
  useEffect(() => {
    checkAuthorization()
  });
  return (
    <>
      <AdminNav />
      <Sidemenu />
      <Routes>
        <Route path="create" element={<ProductForm />} />
        <Route path="products" element={<AdminProducts />} />
        <Route path="profile" element={<AdminInfo />} />
        {/* Default Route */}
        <Route path="*" element={<ProductForm />} />
      </Routes>
    </>
  );
}

export default AdminPanel;
import React, { useEffect, useState } from "react";
import "./products.css";

const AdminProducts = () => {
  const [products, setProducts] = useState([]);
  const [notification, setNotification] = useState("");

  // Fetch products from the API
  const getProducts = async () => {
    try {
      const response = await fetch("http://localhost:3000/getAdminproducts");
      const data = await response.json();
      setProducts(data.products || []); // Set products from the API response
    } catch (e) {
      console.error("Error fetching products:", e);
      showNotification("Error fetching products. Please try again.");
    }
  };

  // Show notification for a limited time
  const showNotification = (message) => {
    setNotification(message);
    setTimeout(() => {
      setNotification(""); // Clear the notification after 3 seconds
    }, 3000);
  };

  // Handle product deletion
  const deleteProduct = async (productName) => {
    try {
      const response = await fetch("http://localhost:3000/deleteproducts", {
        method: "POST", // or "DELETE", depending on your backend setup
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name: productName }), // Sending product name
      });

      const result = await response.json();

      if (response.ok) {
        showNotification(`Product "${productName}" deleted successfully!`);
        // Remove the deleted product from the state
        setProducts(products.filter((product) => product.name !== productName));
      } else {
        showNotification(`Error deleting product: ${result.message}`);
      }
    } catch (error) {
      console.error("Error deleting product:", error);
      showNotification("An error occurred while deleting the product.");
    }
  };

  // Use useEffect to fetch products on component mount
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <div className="admin-products-container">
      {/* Notification div */}
      {notification && <div className="notification">{notification}</div>}

      {/* Message if no products are available */}
      {products.length === 0 ? (
        <h3 className="no-products-message">No products available to display.</h3>
      ) : (
        <div className="products-container">
          {products.map((product, index) => (
            <div
              key={index}
              className="product-box"
              onClick={() => deleteProduct(product.name)}
            >
              <div className="product-img">
                <img src={product.image} alt={product.name} />
              </div>
              <div className="product-info">
                <div className="price">
                  <h2>${product.price}/-</h2>
                </div>
                <div className="product-title">
                  <h3>{product.name}</h3>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default AdminProducts;

import React, { useState, useEffect } from "react";
import "./OrdersPanel.css";

function AdminTrackingPanel() {
    const [orders, setOrders] = useState([]);
    const [expandedOrderId, setExpandedOrderId] = useState(null); // State to track expanded order

    const fetchOrders = async () => {
        try {
            const response = await fetch("http://localhost:3000/getuserorders");
            if (!response.ok) {
                throw new Error("Failed to fetch orders");
            }
            const data = await response.json();
            console.log(data);
            setOrders(data.orders);
        } catch (err) {
            console.log(err);
        }
    };

    // Handle the status change
    const HandleStatusChange = async (username, product_id, status) => {
        try {
            const response = await fetch("http://localhost:3000/updateorderstatus", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ username, product_id, status }),
            });

            const data = await response.json();
            if (response.ok) {
                alert("Product Status Changed Successfully");
                fetchOrders(); // Fetch the updated orders list after status change
            } else {
                alert(data.message || "Failed to change status");
            }
        } catch (err) {
            console.error("Error changing status", err);
        }
    };

    // Toggle the expanded order
    const toggleOrderDetails = (orderId) => {
        setExpandedOrderId((prevOrderId) => (prevOrderId === orderId ? null : orderId));
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    return (
        <div id="orders-page">
            <table>
                <thead>
                    <tr>
                        <th>ORDER ID</th>
                        <th>USERNAME</th>
                        <th>EMAIL</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody>
                    {orders.map((order, index) => (
                        <React.Fragment key={index}>
                            <tr>
                                <td>{index + 1}</td>
                                <td>{order.username}</td>
                                <td>{order.email}</td>
                                <td>
                                    <button onClick={() => toggleOrderDetails(order._id)}>
                                        {expandedOrderId === order._id ? "HIDE" : "VIEW"}
                                    </button>
                                </td>
                            </tr>

                            {/* Only show product details if the order is expanded */}
                            {expandedOrderId === order._id && (
                                <tr colSpan="4">
                                    <td>
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>PRODUCT ID</th>
                                                    <th>PRODUCT NAME</th>
                                                    <th>QTY</th>
                                                    <th>NET TOTAL</th>
                                                    <th>STATUS</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {order.orders.products.map((product) => (
                                                    <tr key={product.product_id}>
                                                        <td>{product.product_id}</td>
                                                        <td>{product.name}</td>
                                                        <td>{product.qty}</td>
                                                        <td>{product.total}</td>
                                                        <td>
                                                            <select
                                                                value={product.status}
                                                                onChange={(e) =>
                                                                    HandleStatusChange(
                                                                        order.username,
                                                                        product.product_id,
                                                                        e.target.value
                                                                    )
                                                                }
                                                                className="status"
                                                            >
                                                                <option value="Under Process">Under Process</option>
                                                                <option value="Handed Over To Shipper">Handed Over To Shipper</option>
                                                                <option value="Out For Delivery">Out For Delivery</option>
                                                                <option value="Delivered">Delivered</option>
                                                            </select>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            )}
                        </React.Fragment>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default AdminTrackingPanel;

import React from 'react';
import { useNavigate } from 'react-router-dom';
import './admin.css';

function Sidemenu() {
    const navigate = useNavigate();
  
    const handleNavigation = (path) => {
      navigate(`/adminpanel/${path}`);
    };
    const handleOrderNavigation = () => {
      navigate(`/orderspanel`);
    };
    
  
    return (
      <div className="panelsidemenu">
        <h2><a onClick={() => handleNavigation('create')}>CREATE</a></h2>
        <h2><a onClick={() => handleNavigation('products')}>PRODUCTS</a></h2>
        <h2><a onClick={handleOrderNavigation}>ORDERS</a></h2>
        <h2><a onClick={() => handleNavigation('profile')}>PROFILE</a></h2>
      </div>
    );
  }
  
  export default Sidemenu;
  

import React, { useState } from 'react';
import './admin.css'
import Sidemenu from './Sidemenu';
import AdminNav from './AdminNav';

const ProductForm = () => {
    const [imageURL, setImageURL] = useState('');
    const [productTitle, setProductTitle] = useState('');
    const [price, setPrice] = useState('');
    const [desc, setDesc] = useState('');
    const [category, setCategory] = useState('');

    const handleCategoryClick = (value) => {
        setCategory(value);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!imageURL || !productTitle || !price || !desc || !category) {
            alert('All Fields Are Required. Please Fill All');
            return;
        }

        const product = {
            image: imageURL,
            name: productTitle,
            price: parseFloat(price),
            desc,
            category,
        };

        try {
            const response = await fetch('http://localhost:3000/createproduct', {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(product),
            });

            const data = await response.json().catch(() => ({ message: 'Invalid server response' }));

            if (response.ok) {
                alert('PRODUCT CREATED SUCCESSFULLY');
                setImageURL('');
                setProductTitle('');
                setPrice('');
                setDesc('');
                setCategory('');
            } else {
                alert(`ERROR: ${data.message}`);
            }
        } catch (err) {
            console.error('Error Submitting Form', err);
            alert('An error occurred. Please try again later.');
        }
    };

    return (
        <>
            <div className="panelform-parent">
                <form onSubmit={handleSubmit} id="panelform">
                    <div className="panelcategories">
                        <h4>CATEGORY</h4>
                        {['EXECUTIVE SERIES', 'CEO COLLECTION', 'ELITE EXCLUSIVE', 'TAILORED PRESTIGED', 'TIMELESS CLASSICS', 'ROYAL HERITAGE'].map((categoryOption) => (
                            <div
                                key={categoryOption}
                                className={`paneloption ${category === categoryOption ? 'selected' : ''}`}
                                onClick={() => handleCategoryClick(categoryOption)}
                            >
                                {categoryOption}
                            </div>
                        ))}
                    </div>
                    <div className="panelinputs">
                        <input
                            type="text"
                            placeholder="IMAGE URL"
                            className="imgurl"
                            value={imageURL}
                            onChange={(e) => setImageURL(e.target.value)}
                        />
                        <input
                            type="text"
                            placeholder="PRODUCT TITLE"
                            className="producttitle"
                            value={productTitle}
                            onChange={(e) => setProductTitle(e.target.value)}
                        />
                        <input
                            type="number"
                            placeholder="PRICE"
                            className="price"
                            value={price}
                            onChange={(e) => setPrice(e.target.value)}
                        />
                        <textarea
                            id="paneldesc"
                            cols="32"
                            rows="5"
                            placeholder="Enter Description"
                            value={desc}
                            onChange={(e) => setDesc(e.target.value)}
                        ></textarea>
                        <input
                            type="submit"
                            value="ADD PRODUCT"
                            id="panelsubmit"
                        />
                    </div>
                </form>
            </div>
        </>
    );
};

export default ProductForm;
import React, { useEffect, useState } from "react";
import './usercart.css'
import { useNavigate } from "react-router-dom";
import { set } from "mongoose";
// import '@fortawesome/fontawesome-free/css/all.min.css';

const UserCart = () => {
    const [cartProducts, setCartProducts] = useState([]);
    const [subtotal, setSubtotal] = useState(0);
    const [checkedProducts, setCheckedProducts] = useState({});
    const [selectedProducts, setSelectedProducts] = useState([]);
    const navigate = useNavigate();

    const fetchCart = async () => {
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/getusercart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName }),
            });

            const data = await response.json();
            setCartProducts(data.products || []);
        } catch (err) {
            console.error("Error fetching cart:", err);
        }
    };
    useEffect(() => {
        fetchCart();
    }, []);

    const deleteProduct = async (productName, price) => {
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/deletecartproduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, productName: productName }),
            });

            const data = await response.json();
            if (response.ok) {
                console.log(data.message);
                setCartProducts((prevProducts) => {
                    const updatedProducts = prevProducts.filter((product) => product.name !== productName);
                    return updatedProducts;
                });
                setSubtotal((prevSubtotal) => prevSubtotal - price);
            } else {
                console.error(`Error: ${data.message}`);
            }
        } catch (err) {
            console.error("Error deleting product:", err);
        }
    };
    // DIVIDING FUNCTIONS SEPERATELY SO THAT FRONTEND AND BACKEND CAN WORK SEPERATE AVOIDING UI BUGS
    const CartProductQuantity = async (productName, action) => {


        try {
            const userName = localStorage.getItem('username');
            const response = await fetch(`http://localhost:3000/${action}qty`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, productName: productName }),
            });
            if (response.ok) {
                const data = await response.json();
                console.log(data.message);
                //  fetchCart();
            }

        }
        catch (err) {
            console.error("Error incrementing quantity:", err);
        }
    };
    // SEPERATE UI FUNCTIONS 
    const updateSubtotal = () => {
        let newSubtotal = 0;
        cartProducts.forEach(product => {
            if (checkedProducts[product.name]) {
                newSubtotal += product.price * product.qty;
            }
        });
        setSubtotal(newSubtotal);
    };
    // SUBTOTAL LIVE CALL 
    useEffect(() => {
        updateSubtotal();
    }, [cartProducts, checkedProducts]);

    // SEMICOLONS AND FUNCTION BRACKETS IN MAP THING END RE CHECK PERMISSIONS 
    const incrementQuantity = (productName) => {
        setCartProducts((prevProducts) =>
            prevProducts.map((product) =>
                product.name === productName ? { ...product, qty: product.qty + 1 } : product

            )
        );
        CartProductQuantity(productName, 'increase');
    };
    const decreamentQuantity = (productName) => {
        setCartProducts((prevProducts) =>
            prevProducts.map((product) =>
                product.name === productName && product.qty > 1 ? { ...product, qty: product.qty - 1 } : product
            )
        );
        CartProductQuantity(productName, 'decrease');
    };
    const handleCheckboxChange = (e, productName) => {
        const isChecked = e.target.checked;
        setCheckedProducts((prevProducts) => ({ ...prevProducts, [productName]: isChecked }));
    }
    // Checkout Page Handling 
    const SendCheckedOutProducts = async (selectedProducts) => {  
        try {
            const userName = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: userName, products: selectedProducts }),
            });
            if (response.ok) {
                const data = await response.json();
                console.log(data.message);
            }
        }
        catch (err) {
            console.error("Error checking out:", err);
        }
    };
    const handleCheckout = () => {
        const selectedProducts = [];
        cartProducts.forEach(product => {
            if (checkedProducts[product.name]) {
                selectedProducts.push({
                    name: product.name,
                    price: product.price,
                    qty: product.qty,
                    total: product.price * product.qty, //PASSING IT FOR TOTAL ON CHECKOUT PAGE YEAAAAHHHH GOOOD MIIINNNNDDDD
                    product_id: product.product_id,
                    image: product.image,
                    status: product.status
                });
            }
        });
        if (selectedProducts.length === 0) {
            alert('SELECT ATLEAST  ONE PRODUCT TO CHECKOUT');
            return;
        }
        setSelectedProducts(selectedProducts);
        SendCheckedOutProducts(selectedProducts);
        navigate('/checkout');
    };
    // console.log(cartProducts);  //REMOVE LATER  ---------------
    // console.log(checkedProducts); //REMOVE LATER---------------
    // console.log(selectedProducts); //REMOVE LATER---------------
    return (
        <div className="user-cart">
            <div className="header">
                <h1>MY CART</h1>
            </div>
            <div className="cart-container">
                {cartProducts.length != 0 ? (
                    cartProducts.map((product, index) => (
                        <div key={index} className="cart-product">
                            <div className="cart-product-img">
                                <img src={product.image} alt={product.name} />
                            </div>
                            <div className="product-details">
                                <h2>${product.price}/-</h2>
                                <h2>{product.name}</h2>
                                <span id="qty">
                                    QTY:
                                    <i className="fa-solid fa-plus" id="increment" onClick={() => incrementQuantity(product.name, product.qty)}></i>
                                    {product.qty}
                                    <i className="fa-solid fa-minus" id="decrement" onClick={() => decreamentQuantity(product.name)}></i>
                                </span>
                            </div>
                            <div className="select-delete-container">
                                <img src="../src/assets/delete-logo.svg" alt="bin" onClick={() => deleteProduct(product.name, product.price)} />
                                <input
                                    type="checkbox"
                                    id="product-check"
                                    onChange={(e) => handleCheckboxChange(e, product.name, product.price, product.qty)}
                                    checked={checkedProducts[product.name] || false}
                                />
                            </div>
                        </div>
                    ))
                ) : <h1 className="default-cart-message">No Products In Cart</h1>
                }

            </div>

            <div className="checkout-box">
                <div className="subtotal-price">
                    <span id="subtotal">SUBTOTAL: ${subtotal.toFixed(2)}/-</span>
                </div>
                <div className="checkout-btn-container">
                    <button type="button" className="checkout-btn" onClick={handleCheckout}>
                        CHECKOUT
                    </button>
                </div>
            </div>
        </div>
    );
};

export default UserCart;
import React, { useState } from "react";
import "./RegisterForm.css";
import Navbar from './Navbar.jsx';

function RegisterForm() {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [notification, setNotification] = useState({ message: '', type: '' }); // State for notifications

    const handleSubmit = async (e) => {
        e.preventDefault();
        const user = { username, email, password };

        if (username !== '' && email !== '' && password !== '') {
            try {
                const response = await fetch('http://localhost:3000/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(user),
                });
                if (response.ok) {
                    const newUser = await response.json();
                    console.log('User Created', newUser);

                    // Clear form fields after successful registration
                    setUsername('');
                    setEmail('');
                    setPassword('');

                    // Show success notification
                    setNotification({ message: 'User Created Successfully! LOG IN', type: 'success' });
                } else {
                    setNotification({ message: 'Registration Failed. Try Again.', type: 'error' }); // Error notification
                }
            } catch (err) {
                console.log(err);
                setNotification({ message: 'An error occurred. Please try again later.', type: 'error' }); // Error notification
            }
        } else {
            setNotification({ message: 'Please fill in all fields.', type: 'error' }); // Error notification for empty fields
        }
    };

    return (
        <>
        <Navbar />
            <div className="form">
                <div className="text-box">
                    <div className="loginicon">
                        <img src="/src/assets/LoginIcon.png" alt="" />
                    </div>
                    <h1>REGISTER NOW</h1>
                </div>
                <form id="RegisterForm" onSubmit={handleSubmit}>
                    <input
                        type="text"
                        placeholder="User Name"
                        className="inputs"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                    />
                    <input
                        type="email"
                        placeholder="Email"
                        className="inputs"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        className="inputs"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                    <input
                        type="submit"
                        value="Register"
                        className="RegisterBtn"
                    />
                </form>
            </div>

            {/* Notification */}
            {notification.message && (
                <div className={`notification ${notification.type}`}>
                    {notification.message}
                </div>
            )}
        </>
    );
}

export default RegisterForm;
import React, { useEffect, useState } from 'react';
import './user-products.css';
import ProductNav from './ProductNav';
import { useParams } from 'react-router-dom';

const Products = () => {
    const [products, setProducts] = useState([]);
    const [notificationMessage, setNotificationMessage] = useState(null); // State for the notification message
    const { categoryName } = useParams();

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const response = await fetch(`http://localhost:3000/getproducts/${categoryName}`);
                const data = await response.json();
                setProducts(data.products);
            } catch (err) {
                console.error('Error fetching products:', err);
            }
        };

        fetchProducts();
    }, [categoryName]);

    const handleAddToCart = async (productName) => {
        const username = localStorage.getItem('username');
        try {
            const response = await fetch('http://localhost:3000/createcartproducts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: productName,
                    username: username,
                }),
            });
            const data = await response.json();
            if (response.ok) {
                setNotificationMessage(`${productName} Added To Cart!`); // Show notification on success
                setTimeout(() => {
                    setNotificationMessage(null); // Hide notification after 5 seconds
                }, 5000);
            } else {
                setNotificationMessage('Error adding product to cart.');
            }
        } catch (err) {
            console.error('Error adding product to cart:', err);
            setNotificationMessage('Error Adding Product To Cart.');
        }
    };

    return (
        <>
            <ProductNav />
            <div className="products-container-user">
                {products.map((product, index) => (
                    <div className="product-box" key={index}>
                        <div className="product-img">
                            <img src={product.image} alt={product.name} />
                        </div>
                        <div className="product-info">
                            <div className="price">
                                <h2>${product.price}/-</h2>
                                <img
                                    className="cart-logo"
                                    src="../src/assets/cart-logo.png"
                                    alt="Add to cart"
                                    onClick={() => handleAddToCart(product.name)}
                                />
                            </div>
                            <div className="product-title">
                                <h3>{product.name}</h3>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Notification */}
            {notificationMessage && (
                <div className="notification-div-cart">
                    {notificationMessage}
                </div>
            )}
        </>
    );
};

export default Products;
import React from "react";
import './HomeNav.css'
import { useNavigate, useParams } from "react-router-dom";



function ProductNav(catgName) {
    const {categoryName} = useParams();
    const navigate = useNavigate();
    function navigateCart() {
        navigate('/usercart');
    }
    return (
        <>
            <nav id="nav">
                <div class="logo">
                    <img src="/src/assets/Logo.png" alt="Logo" />
                </div>
                <div class="essential-box">
                    <div class="search">
                        <input type="search" name="" id="" placeholder="Search For Your Look" />
                        <img src="/src/assets/search-logo.png" alt="" srcset="" />
                    </div>
                    <div class="cart">
                        <img src="/src/assets/cart-logo.png" alt=""  onClick={navigateCart}/>
                    </div>
                </div>
            </nav>
            <div class="product-header">
                <h1>{categoryName}</h1>
            </div>
            <hr class="hr" />
        </>
    )
}

export default ProductNav;
import React, { useState, useEffect } from "react";

const ProductList = () => {
    const [products, setProducts] = useState([]);

    // Fetch products from API
    const loadProducts = async () => {
        try {
            const response = await fetch("http://localhost:3000/products");
            const data = await response.json();

            if (response.ok) {
                setProducts(data.products);
            } else {
                console.error("Failed to fetch products.");
            }
        } catch (error) {
            console.error("Error loading products:", error);
        }
    };

    // Load products on component mount
    useEffect(() => {
        loadProducts();
    }, []);

    return (
        <div className="products-container" id="products-container">
            <h2>Products</h2>
            <div className="product-cards">
                {products.length > 0 ? (
                    products.map((product) => (
                        <div key={product._id} className="product-card">
                            <img src={product.image} alt={product.name} />
                            <h3>{product.name}</h3>
                            <p>{product.desc}</p>
                            <div className="price">${product.price}</div>
                        </div>
                    ))
                ) : (
                    <p>No products available.</p>
                )}
            </div>
        </div>
    );
};

export default ProductList;
import React, { useState } from "react";
import { useNavigate } from "react-router-dom"; // Import useNavigate
import "./LoginForm.css";
import Navbar from './Navbar.jsx';

function LoginForm() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [notification, setNotification] = useState({ message: '', type: '' }); // New state for notification
    const navigate = useNavigate(); 

    const handleSubmit = async (e) => {
        e.preventDefault();
        const user = { email, password };
        try {
            const response = await fetch('http://localhost:3000/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(user),
            });

            if (response.ok) {
                const data = await response.json();
                let token = data.token;
                let username = data.username;
                localStorage.setItem('token', token);
                localStorage.setItem('username', username);
                setNotification({ message: 'Login Successful!', type: 'success' }); // Success notification
                navigate('/home'); // Redirect to home page
            } else {
                setNotification({ message: 'Login Failed. Please check your credentials.', type: 'error' }); // Error notification
            }
        } catch (err) {
            console.log(err);
            setNotification({ message: 'An error occurred. Please try again.', type: 'error' }); // Error notification
        }
    };

    return (
        <>
        <Navbar />
            <div className="form">
                <div className="text-box">
                    <div className="loginicon">
                        <img src="/src/assets/LoginIcon.png" alt="" />
                    </div>
                    <h1>Log In</h1>
                </div>
                <form id="RegisterForm" onSubmit={handleSubmit}>
                    <input
                        type="email"
                        placeholder="Email"
                        className="inputs"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        className="inputs"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                    <input
                        type="submit"
                        value="Log In"
                        className="RegisterBtn"
                    />
                </form>
            </div>

            {/* Notification */}
            {notification.message && (
                <div className={`notification ${notification.type}`}>
                    {notification.message}
                </div>
            )}
        </>
    );
}

export default LoginForm;

import React, { useEffect, useState } from "react";
import './TrackingPage.css'

function TrackingPage() {
    const [OrderedProducts, setOrderedProducts] = useState([]);
    const [netTotal, setnetTotal] = useState('')
    async function FetchUserOrders(params) {

        try {
            const username = localStorage.getItem('username');
            const response = await fetch(`http://localhost:3000/trackorders`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            });
            const data = await response.json();
            if (response.ok) {
                // console.log(data);
                setOrderedProducts(data.OrderedProducts);
                setnetTotal(data.NetTotal)
            }
        }
        catch (err) {
            console.error(err);
        }

    }
    useEffect(() => {
        FetchUserOrders();
    }, [])
    return (
        <>
            <div className="tracking-header">
                <img src="../src/assets/logo.png" alt="" />
                <div className="net-total-container">
                    <h2>NET TOTAL<sub>(Incl Tax)</sub> : ${netTotal}/-</h2>
                </div>
            </div>


            <div className="user-orders">
                <h1>Orders</h1>

                {OrderedProducts.length > 0 ? (
                    OrderedProducts.map((order, index) => (
                        <div className="orders-container" key={index}>
                            <div className="p-img">
                                <img src={order.image || defaultProductImg} alt={order.name} />
                            </div>

                            <div className="p-details">
                                <span>QTY: {order.qty}</span>
                                <span>TOTAL: ${order.total}/-</span>
                            </div>

                            <div className="status-container">
                                <h2>
                                    Status: <strong>{order.status}</strong>
                                </h2>
                            </div>
                        </div>
                    ))
                ) : (
                    <p>No orders found.</p>
                )}
            </div>
        </>
    )
}

export default TrackingPage
import React from "react";
import { useNavigate } from "react-router-dom";
import './lastpage.css'

function LastPage(){
    const navigate = useNavigate();

    function handleHomeNavigation(){
        navigate('/home')
    }
    function handleTrackOrderNavigation(){
        navigate('/trackorders')
    }
    return(
        <>
        <div className="last-header">
            <img src="../src/assets/logo.png" alt="LOGO" />
        </div>
        <div className="outro-content">
            <div className="check-mark">
                <img src="../src/assets/checkmark.png" alt="CheckMark" />
            </div>
            <div className="outro-text">
                <h2>ORDER PLACED SUCCESSFULLY</h2>
                <h1>THANK YOU FOR SHOPPING WITH US</h1>
            </div>
            <div className="redirecting-btns">
                <button onClick={handleHomeNavigation}>
                    HOME
                </button>
                <button onClick={handleTrackOrderNavigation}>
                    TRACK ORDER
                </button>
            </div>
        </div>

        </>
    )
}

export default LastPage;
import React from "react";
import './HomeNav.css'
import { useNavigate } from "react-router-dom";



function HomeNav() {
    const navigate = useNavigate();
    function navigateCart() {
        navigate('/usercart');
    }

    return (
        <>
            <nav id="nav">
                <div class="logo">
                    <img src="/src/assets/Logo.png" alt="Logo" />
                </div>
                <div class="essential-box">
                    <div class="search">
                        <input type="search" name="" id="" placeholder="Search For Your Look" />
                        <img src="/src/assets/search-logo.png" alt="Search Logo" srcset="" />
                    </div>
                    <div class="cart">
                        <img src="/src/assets/cart-logo.png" alt="Cart-Logo" onClick={navigateCart} />
                    </div>
                </div>
            </nav>
        </>
    )
}

export default HomeNav;
import React, { useEffect, useState } from "react";
import './checkoutpage.css';
import { useNavigate } from "react-router-dom";

function CheckoutBox() {
    const [total, setTotal] = useState(0);
    const [shipmentCharge, setShipmentCharge] = useState(0);
    const [gst, setGst] = useState(0);
    const [netTotal, setNetTotal] = useState(0);

    // Shipping INfo 
    const [country, setCountry] = useState('');
    const [city, setCity] = useState('');
    const [address, setAddress] = useState('');
    const [landmark, setLandmark] = useState('');
    const [postalCode, setPostalCode] = useState('');

    // Notification 
    const [notification, setNotification] = useState('');

    const navigate = useNavigate()

    // Sending Shipping Data 
    const sendShippingData = async (e) => {
        e.preventDefault();
        const shippingData = { country, city, address, landmark, postalCode };
        
        try {
            const username = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/placeorder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, shippingData }),
            });
            const data = await response.json();
            if (response.ok) {
                setNotification("ORDER COMPLETED SUCCESSFULLY  YOU CAN TRACK IT ON HOME PAGE BY CLICKING ON LOGO");

                // Hide notification after 3 seconds
                setTimeout(() => {
                    setNotification(''); 
                    navigate('/orderconfirmation')
                }, 7000);
            }

        }
        catch (err) {
            console.error("Error:", err);
        }
    };

    // Net Total Function 
    async function getNetTotal() {
        try {
            const username = localStorage.getItem('username');
            const response = await fetch('http://localhost:3000/placeorder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username }),
            });

            const data = await response.json();
            console.log(data)
            if (response.ok) {

                // Default Notification 
                setNotification('PLEASE PROCEED WITH YOUR ORDER IN 30 MINS ELSE IT WILL BE CANCELLED AUTOMATICALLY');

                setTimeout(() => {
                    setNotification('');
                }, 8000);
                setTotal(data.total || 0);
                setShipmentCharge(data.shipmentCharge || 0);
                setGst(data.gst || 0);
                setNetTotal(data.netTotal || 0);

                setCountry(data.shippingAddress.country || '');
                setCity(data.shippingAddress.city || '');
                setAddress(data.shippingAddress.address || '');
                setLandmark(data.shippingAddress.landmark || '');
                setPostalCode(data.shippingAddress.postalCode || '');
            } else {
                console.error("Error:", data.message);
            }
        }
        catch (err) {
            console.error("Error fetching cart:", err);
        }
    }

    useEffect(() => {
        getNetTotal();
        const timeout = setTimeout(() => {
            getNetTotal(); //REFETCHING SAME FUNCTION SO THE UI RELAODS IN ORDER TO SHOW CORRECT VALUES
        }, 1000);  //USED TIMEOUT INSTEAD OF INTERVAL SO IT COULD ONLY RUN ONCE DUE TO NOTIFICATION BUG
        return ()=> clearInterval(timeout);
    }, []);

    return (
        <>
            <div className="checkout-header">
                <h1>CHECKOUT</h1>
            </div>
            <div className="checkout-container">
                <div className="address-container">
                    <h3>SHIPPING ADDRESS</h3>
                    <form className="shipping-details-form">
                        <input type="text" placeholder="COUNTRY" value={country} onChange={(e) => setCountry(e.target.value)} />
                        <input type="text" placeholder="CITY" value={city} onChange={(e) => setCity(e.target.value)} />
                        <textarea placeholder="ADDRESS" value={address} onChange={(e) => setAddress(e.target.value)}></textarea>
                        <input type="text" placeholder="LANDMARK" value={landmark} onChange={(e) => setLandmark(e.target.value)} /><br />
                        <input type="text" placeholder="POSTAL CODE" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} />
                    </form>
                </div>
                <div className="total-container">
                    <div className="charges">
                        <h5>BILL: ${total}/-</h5>
                    </div>
                    <div className="charges">
                        <h5>SHIPPING: ${shipmentCharge}/-</h5>
                    </div>
                    <div className="charges">
                        <h5>GST%: ${gst}/-</h5>
                    </div>
                    <div className="net-total">
                        <h3>NET TOTAL: ${netTotal}/-</h3>
                    </div>
                </div>
                <div className="place-order-btn">
                    <button onClick={sendShippingData}>PLACE ORDER</button>
                </div>
            </div>
            {notification && (
                <div className="notification-div">
                    <h3>{notification}</h3>
                </div>
            )}
        </>
    );
}

export default CheckoutBox;

import React from "react";
import { useNavigate } from "react-router-dom";
import "./category.css";

function Category() {
  const navigate = useNavigate();

  // Handler for category click
  const handleCategoryClick = (categoryName) => {
    navigate(`/products/${categoryName}`);
  };

  return (
    <div className="cat-parent">
      <h1>CATEGORIES</h1>
      <div className="cat-boxes">
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("EXECUTIVE SERIES")}
        >
          <div className="img">
            <img src="/src/assets/cat-1.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>EXECUTIVE SERIES</h2>
          </div>
        </div>
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("CEO COLLECTION")}
        >
          <div className="img">
            <img src="/src/assets/cat-2.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>CEO COLLECTION</h2>
          </div>
        </div>
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("ELITE EXCLUSIVE")}
        >
          <div className="img">
            <img src="/src/assets/cat-3.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>ELITE EXCLUSIVE</h2>
          </div>
        </div>
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("TAILORED PRESTIGED")}
        >
          <div className="img">
            <img src="/src/assets/cat-4.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>TAILORED PRESTIGED</h2>
          </div>
        </div>
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("TIMELESS CLASSICS")}
        >
          <div className="img">
            <img src="/src/assets/cat-5.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>TIMELESS CLASSICS</h2>
          </div>
        </div>
        <div
          className="cat-box"
          onClick={() => handleCategoryClick("ROYAL HERITAGE")}
        >
          <div className="img">
            <img src="/src/assets/cat-6.png" alt="Category Picture" />
          </div>
          <div className="txt">
            <h2>ROYAL HERITAGE</h2>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Category;

import './LoginNavBar.css'
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import LoginForm from './LoginForm';
import RegisterForm from './RegisterForm';

function AdminNav() {
// Preventing Default Behaviour Of A 
    const navigate  = useNavigate();

    const handleNavigation = (e,path)=>{
        e.preventDefault();
        navigate(path);
    }

    return (
        <>
           <nav id="LoginNav">
        <div class="logo-box">
            <img src="/src/assets/Logo.png" alt=""/>
        </div>
        <div class="nav-links">
            <a href="/register" onClick={(e)=>{handleNavigation(e,'/adminregister')}}>Sign Up</a>
            <a href="/login"onClick={(e)=>{handleNavigation(e,'/adminlogin')}}>Log In</a>
        </div>
    </nav>
        </>
    )
}

export default AdminNav;
import React, { useState,  } from "react";
import { useNavigate } from "react-router-dom";
import "./LoginForm.css";
import AdminNav from "./AdminNav";

function AdminLoginForm() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [admin_id, setID] = useState('');
    const [notification, setNotification] = useState({ message: '', type: '' });
    const navigate = useNavigate(); 

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validation for empty fields
        if (!email || !password || !admin_id) {
            setNotification({ message: 'All fields are required.', type: 'error' });
            return;
        }

        const user = { email, password, admin_id };
        try {
            const response = await fetch('http://localhost:3000/adminlogin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(user),
            });

            if (response.ok) {
                const data = await response.json();
                const token = data.token;
                const adminInfo = data.adminInfo
                console.log(data)

                // Items Set In Local Storage 
                localStorage.setItem('token', token);
                localStorage.setItem('adminInfo', JSON.stringify(adminInfo));

                // Notification Handling 
                setNotification({ message: 'Login Successful!', type: 'success' });
                navigate('/adminpanel'); 
            } else {
                const error = await response.json();
                setNotification({ message: error.message || 'Login Failed. Please check your credentials.', type: 'error' });
            }
        } catch (err) {
            console.error(err);
            setNotification({ message: 'An error occurred. Please try again.', type: 'error' });
        }
    };

    return (
        <>
           <AdminNav/>
            <div className="form">
                <div className="text-box">
                    <div className="loginicon">
                        <img src="/src/assets/LoginIcon.png" alt="Login Icon" />
                    </div>
                    <h1>Log In</h1>
                </div>
                <form id="RegisterForm" onSubmit={handleSubmit}>
                    <input
                        type="email"
                        placeholder="Email"
                        className="inputs"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        className="inputs"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                    <input
                        type="password"
                        placeholder="Admin ID"
                        className="inputs"
                        value={admin_id}
                        onChange={(e) => setID(e.target.value)}
                    />
                    <input
                        type="submit"
                        value="Log In"
                        className="RegisterBtn"
                    />
                </form>
                <h3 style={{
    padding: '20px', 
    backgroundColor: '#f70101', 
    color: '#fadd8a', 
    border: '1px solid #f70101', 
    borderRadius: '5px', 
    textAlign: 'center', 
    fontWeight: 'bold',
    margin: '20px auto',
    width: 'fit-content',
    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)'
}}>
    ONLY FOR ADMINS
</h3>
            </div>

            {/* Notification */}
            {notification.message && (
                <div className={`notification ${notification.type}`}>
                    {notification.message}
                </div>
            )}
        </>
    );
}

export default AdminLoginForm;

import React from "react";
import './AboutUs.css'

function AboutUS(){
    return (
        <>
        <div className="about-us-container">
            <div className="about-header">
                <h1>ABOUT US</h1>
            </div>
            <div className="about-context">
                <strong><h2>ELITE-THREADS</h2></strong><h4><strong>Where sophistication meets craftsmanship!</strong></h4> <br />
                <div className="context">
                <p>Discover our exceptional collection of formal suits that offer both timeless style and superior comfort, ensuring you look
                your best while feeling confident.</p>
                </div>
                
            </div>
        </div>
        </>
    )
}

export default AboutUS;
import jwt from 'jsonwebtoken';
const JWT_SECRET = 'secret';

export const authenticateToken = (req, res, next) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
        return res.status(401).send(`Access Denied You Don't Have JWT Access Key`   );
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(400).send('Invalid token');
    }
};

 
 import mongoose from 'mongoose';

// Define the user schema
const userSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String,
    isAdmin: {
        type: Boolean,
        default: false
    },
    cart: {
        products: [
            {
                product_id: { type: Number, required: true },
                image: { type: String, required: true },
                name: { type: String, required: true },
                price: { type: Number, required: true },
                desc: { type: String, required: true },
                category: { type: String, required: true },
                qty: { type: Number, default: 1 }
            }
        ],
        CheckedOutProducts: [
            {
                image: {type:String, required: true},
                product_id: { type: Number, required: true },
                name: { type: String, required: true },
                price: { type: Number, required: true },
                qty: { type: Number, default: 1 },
                total: { type: Number, required: true },
                status: {type: String, default: "Order Received"}
            }
        ]
    },
    shippingAddress: {
        address: String,
        city: String,
        postalCode: String,
        country: String,
        landmark: String
    },
   orders: {
    products: [
        {
            image: {type:String, required: true},
            product_id: { type: Number, required: true },
            name: { type: String, required: true },
            price: { type: Number, required: true },
            qty: { type: Number, default: 1 },
            total: { type: Number, required: true },
            status: {type: String, default: "Order Received"}

        }
    ],
    NetTotal: {type: Number},
    CreatedAt: { type: Date, default: Date.now }
   }
});

// Create the user model
const User = mongoose.model('User', userSchema);

export default User;
import mongoose from 'mongoose';


// Define the user schema
const ProductSchema = new mongoose.Schema({
    image: {type: String, required: true},
    name: {type: String, required: true} ,
    price: {type: Number , required: true},
    desc: {type: String , required: true},
    category: {
        type: String,
        required: true,
    },
    product_id: {type: Number, required: true}

});

// Create the user model
const Product = mongoose.model('Product', ProductSchema);

export default Product;
import mongoose from 'mongoose';

const adminSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String,
    isAdmin: {
        type: Boolean,
        default: true
    },
    admin_id: {
        type: Number,
        required: true,
        unique: true
    },
    AdminOrders: {
        userOrders:
            [
                {
                    username: { type: String },
                    email: { type: String },
                    shippingAddress: {
                        address: String,
                        city: String,
                        postalCode: String,
                        country: String,
                        landmark: String
                    },
                    products: [
                        {
                            product_id: { type: Number, required: true },
                            name: { type: String, required: true },
                            qty: { type: Number, default: 1 },
                            total: { type: Number, required: true }
                        }
                    ],
                    NetTotal: { type: Number, required: true },
                    Status: { type: String, default: "Received" },
                    OrderDate: { type: Date, default: Date.now }
                }
            ]
    }

});

// Create the user model
const Admin = mongoose.model('Admin', adminSchema);

export default Admin;
import User from "../models/user-model.js";
import jwt from 'jsonwebtoken'; // Make sure you import jwt
const JWT_SECRET = 'secret'; // Set your JWT secret

// Register Controller

export const register = async (req, res) => {
    try {
        const { username, email, password } = req.body;

        // Check if the username or email already exists
        const existingUser = await User.findOne({ $or: [{ email }, { username }] });

        if (existingUser) {
            return res.status(400).json({ message: 'Username or Email already registered' });
        }

        // If not, create a new user
        const newUser = new User({ username, email, password });
        await newUser.save();

        res.status(201).json({ message: 'User registered successfully', user: newUser });
    } catch (error) {
        res.status(400).json({ message: 'Error registering user', error: error.message });
    }
};

// Login Controller
export const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user || user.password !== password) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // JWT payload
        const payload = {
            email: user.email,
            username: user.username
        };

        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });

        res.status(200).json({
            message: 'Login successful',
            token,
            username : user.username
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error during login', error: error.message });
    }
};

// controllers/productController.js
import Product from '../models/product-model.js';

// Controller to handle creating a product
export const createProduct = async (req, res) => {
    try {
        const { image, name, price, desc,  category } = req.body;
        const ProductCount = await Product.countDocuments()
        const product_id = ProductCount + 1; 
        const newProduct = new Product({
            product_id,
            image,
            name,
            price,
            desc,
            category
        });
        await newProduct.save();
        res.status(201).json({ message: 'Your product was created successfully', product: newProduct });
    } catch (error) {
        res.status(400).json({ message: 'Error creating product', error: error.message });
        console.log(error)
    }
};

// Controller to handle fetching all products
export const getProducts = async (req, res) => {
    try {
        const {categoryName} = req.params;

        // Fetch all products from the database
        const products = await Product.find({category: categoryName});

        // Send the products as a response
        res.status(200).json({
            message: 'Products fetched successfully',
            products: products
        });
    } catch (error) {
        res.status(500).json({
            message: 'Error fetching products',
            error: error.message
        });
    }
};
export const getAdminProducts = async (req, res) => {
    try {

        // Fetch all products from the database
        const products = await Product.find({});

        // Send the products as a response
        res.status(200).json({
            message: 'Products fetched successfully',
            products: products
        });
    } catch (error) {
        res.status(500).json({
            message: 'Error fetching products',
            error: error.message
        });
    }
};

export const deleteProducts = async (req,res)=>{
    try{
        const productName = req.body.name;

        const foundProduct = await Product.find({name: `${productName}`});
        if(!foundProduct){
            res.status(404).json({
                message: 'Product Not Found'
            });
        }
        await Product.deleteOne({name: `${productName}`});
        res.status(200).json({
            message: 'Product Deleted Successfully',
            name: productName
        });
    }
    catch (error){
        res.status(500).json({
            message: 'Error Delteting Products',
            error: error.message
        });
    }
}

import Product from "../models/product-model.js";
import User from "../models/user-model.js";

export const CreateCartProducts = async (req, res) => {
    try {


        let { name: productName, username: UserName } = req.body;


        let findProduct = await Product.findOne({ name: productName });
        if (!findProduct) {
            return res.status(404).json({
                message: 'Product Not Found'
            });
        }


        let findUser = await User.findOne({ username: UserName });
        if (!findUser) {
            return res.status(404).json({
                message: 'USER NOT FOUND'
            });
        }

        let productInCart = findUser.cart.products.find(product => product.name === productName);

        if (productInCart) {
            productInCart.qty += 1;
        } else {
            findUser.cart.products.push({
                product_id: findProduct.product_id,
                image: findProduct.image,
                name: findProduct.name,
                price: findProduct.price,
                desc: findProduct.desc,
                category: findProduct.category,
                qty: 1
            });
        }

        await findUser.save();

        return res.status(200).json({
            message: 'Product added to cart successfully',
            cart: findUser.cart
        });
    }
    catch (err) {
        res.send(err);
    }
};

export const userCart = async (req, res) => {
    try {

        const userName = req.body.username;

        let foundUser = await User.findOne({ username: userName });

        let userCart = foundUser.cart;

        if (!foundUser) {
            res.status(404).json({
                message: `USER NOT FOUND`
            })
        }
        else {
            res.send(userCart);
        }
    }
    catch (error) {
        res.send(error)
    }
};

export const DelteCartProducts = async (req, res) => {
    try {
        let { username: userName, productName: productName } = req.body;

        let foundUser = await User.findOne({ username: userName });
        if (!foundUser) {
            res.status(404).json({
                message: `User Invalid`
            });
        }
        else {
            const UpdateCart = await User.updateOne(
                { username: userName },
                { $pull: { 'cart.products': { name: productName } } }
            )
            res.status(200).json({
                message: 'Product Deleted Successfully'
            });
        }
    }
    catch (err) {
        res.json({
            message: `Error Deleting Product ${err}`
        });
    }
}

export const increaseCartQuantity = async (req, res) => {
    try {
        let { username: userName, productName: productName } = req.body;
        let foundUser = await User.findOne({ username: userName }); //REQUIREMENT 
        if (!foundUser) {
            res.status(404).json({
                message: `User Not Found`
            });
        }

        let productInCart = foundUser.cart.products.find(product => product.name === productName);

        if (productInCart) {
            productInCart.qty += 1;
            res.status(200).json({
                message: 'Quantity Updated Successfully'
            });
        } else {
            res.status(404).json({
                message: `Product Not Found`
            });
        }

        foundUser.save(); //THISSSSSSS ISSSSSSS IMMMMMPOOOORRRRTTTTAAAAANTTTTTAAA!
    }
    catch (err) {
        res.json({
            message: `Error Updating Product Quantity ${err}`
        });
    }
};
export const decreaseCartQuantity = async (req, res) => {
    try {
        let { username: userName, productName: productName } = req.body;
        let foundUser = await User.findOne({ username: userName });
        if (!foundUser) {
            res.status(404).json({
                message: `User Not Found`
            });
        }

        let productInCart = foundUser.cart.products.find(product => product.name === productName);

        if (productInCart.qty != 0 && productInCart.qty != 1) { //This is to prevent the quantity from going below 0 Or Zero
            if (productInCart) {
                productInCart.qty -= 1;
                res.status(200).json({
                    message: 'Quantity Updated Successfully'
                });
            } else {
                res.status(404).json({
                    message: `Product Not Found`
                });
            }
        }
        else {
            productInCart.qty = 1;
            res.status(200).json({
                message: 'Quantity Updated Successfully 0000'
            });
        }
        foundUser.save(); //THISSSSSSS ISSSSSSS IMMMMMPOOOORRRRTTTTAAAAANTTTTTAAA!

    }
    catch (err) {
        res.json({
            message: `Error Updating Product Quantity ${err}`
        });
    }
};
import Admin from "../models/admin-model.js";
import jwt from 'jsonwebtoken'; // Make sure you import jwt
const JWT_SECRET = 'secret'; // Set your JWT secret

// Register Controller

export const AdminRegister = async (req, res) => {
    try {
        const { username, email, password } = req.body;

        // Check if the username or email already exists
        const existingUser = await Admin.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: 'You Are Already Admin' });
        }

        // Generate a unique 5-digit random ID
        let admin_id;
        do {
            admin_id = Math.floor(10000 + Math.random() * 90000);
        } while (await Admin.findOne({ admin_id }));
        

        // Create a new admin
        const newAdmin = new Admin({ username, email, password, admin_id });
        await newAdmin.save();

        res.status(201).json({ 
            message: 'Admin registered successfully', 
            adminInfo: {
                admin_id: newAdmin.admin_id, // Send ID back to the frontend
                username: newAdmin.username,
                email: newAdmin.email,
                password: newAdmin.password
            } 
        });
    } catch (error) {
        res.status(500).json({ message: 'Error registering Admin', error: error.message });
    }
};


// Login Controller


export const Adminlogin = async (req, res) => {
    try {
        const { email, password, admin_id } = req.body;

        // Find admin by email or admin ID
        const admin = await Admin.findOne( {email ,  admin_id}  );
        if (!admin) {
            return res.status(400).json({ message: 'Invalid Admin credentials' });
        }

        // Verify the password
        if (admin.password !== password) {
            return res.status(400).json({ message: 'Invalid Admin credentials' });
        }

        // JWT payload
        const payload = {
            email: admin.email,
            username: admin.username,
            admin_id: admin.admin_id,
        };


        // Generate token
        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });

        // ADMIN INFO FOR PANEL 
        const adminInfo = {
            admin_id: admin.admin_id,
            username: admin.username,
            email: admin.email,
            password: admin.password
        }
        res.status(200).json({
            message: 'Login successful',
            token,
            adminInfo
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error during login', error: error.message });
    }
};


import mongoose from 'mongoose';
// Connect to MongoDB

async function connectDB() {
    try {
        await mongoose.connect('mongodb+srv://zain20061008:oviStHBt1WGgOlf9@elite-threads.o07xq.mongodb.net/elite-threads', {
        });
        console.log('Connected to MongoDB');
    } catch (err) {
        console.error('Error connecting to MongoDB', err);
    }
}

// connectToDatabase();

export default connectDB;